type TimeType {
    start: String
    end: String
}

type AdminUserType {
    id: Int
}

type LocationType {
    lang: Float
    long: Float
}

type EventType {
    pointId: Int
    title: String
    time: TimeType
    description: String
    people: [PeopleType]
    admins: [AdminUserType]
    tags: [Int]
}

# Локация
type PointType {
    title: String
    location :LocationType
}

type TagRatingType {
    id: Int,
    value: Int
}

type EventTagType {
    eventId: Int
    ratings: [TagRatingType]
}

type PeopleType {
    name: String
    age: Int
    tags: [TagRatingType]
    history: [EventTagType]
}

type AdminType {
    title: String
    events: [EventType]
    points: [PointType]
}

type TagType {
    id: Int
}

#Кружок
type ItemType {
    id: Int
    title: String
    events: [EventType]
    tags: [TagType]
}

type Query {
    admin(adminId: Int): AdminType
    #    events(page: Int, pageSize: Int): [EventType]
}

type Mutation {
    fakeMutation:Boolean
    item(create: InputCreateItemType, update: InputUpdateItemType, delete: [Int]): ReturnItemType
    tag(create: InputCreateTagType, update: InputUpdateTagType, delete: [Int]): ReturnTagType
}

#===============#
# Query section #
#===============#

#======#
# Item #
#======#
# item(create: InputCreateItemType, update: InputUpdateItemType, delete: [Int]): ReturnItemType

input InputTagType {
    id: Int
}

input InputCreateItemType {
    title: String
    tags: [InputTagType]
}

input InputUpdateItemType {
    id: Int
    title: String
    tags: [InputTagType]
}

type ReturnItemType {
    create: ItemType
    update: Boolean
    delete: Boolean
}

#=====#
# Tag #
#=====#
# tag(create: InputCreateTagType, update: InputUpdateTagType, delete: [Int]): ReturnTagType

input InputCreateTagType {
    title: String
}

input InputUpdateTagType {
    id: Int
    title: String
}

type ReturnTagType {
    create: TagType
    update: Boolean
    delete: Boolean
}
