type TimeType {
    start: String
    end: String
}

type AdminUserType {
    id: Int
}

type LocationType {
    lang: Float
    long: Float
}

type EventType {
    id: Int
    point: PointType
    title: String
    time: TimeType
    description: String
    people: [Int]
    admins: [Int]
    tags: [Int]
}

# Локация
type PointType {
    title: String
    location: LocationType
}

type TagRatingType {
    id: Int,
    value: Int
}

type EventTagType {
    eventId: Int
    ratings: [TagRatingType]
}

type PeopleType {
    name: String
    age: Int
    tags: [TagRatingType]
    history: [EventTagType]
}

type AdminType {
    title: String
    events: [EventType]
    points: [PointType]
}

type TagType {
    id: Int
}

#Кружок
type ItemType {
    id: Int
    title: String
    events: [EventType]
    tags: [TagType]
}

type Query {
    admin(adminId: Int!): AdminType
    getEvents: [EventType]
    getEvent(id: Int!): EventType

    getItems: [ItemType]
    getItem(id: Int): ItemType

    getPoints: [PointType]
    getPoint(id: Int): PointType

    tagSuggest(search: String): [TagType]
}

type Mutation {
    event(create: InputCreateEventType, update: InputUpdateEventType, delete: [Int]): ReturnEventType
    item(create: InputCreateItemType, update: InputUpdateItemType, delete: [Int]): ReturnItemType
    tag(create: InputCreateTagType, update: InputUpdateTagType, delete: [Int]): ReturnTagType
    point(create: InputCreatePointType, update: InputUpdatePointType, delete: [Int]): ReturnPointType
}

#===============#
# Query section #
#===============#

#======#
# Item #
#======#
# item(create: InputCreateItemType, update: InputUpdateItemType, delete: [Int]): ReturnItemType

input InputTagType {
    id: Int
}

input InputCreateItemType {
    title: String
    tags: [InputTagType]
}

input InputUpdateItemType {
    id: Int
    title: String
    tags: [InputTagType]
}

type ReturnItemType {
    create: ItemType
    update: Boolean
    delete: Boolean
}

#=====#
# Tag #
#=====#
# tag(create: InputCreateTagType, update: InputUpdateTagType, delete: [Int]): ReturnTagType

input InputCreateTagType {
    title: String
}

input InputUpdateTagType {
    id: Int
    title: String
}

type ReturnTagType {
    create: TagType
    update: Boolean
    delete: Boolean
}

#=======#
# Event #
#=======#
# event(create: InputCreateEventType, update: InputUpdateEventType, delete: [Int]): ReturnEventType

input PointInputType {
    name: String
    lang: Float
    long: Float
}

input InputCreateEventType {
    itemId: Int
    title: String
    desc: String
    point: PointInputType
    start: String
    end: String
    tags: [Int]
}

input InputUpdateEventType {
    id: Int
    title: String
    desc: String
    point: PointInputType
    start: String
    end: String
    tags: [Int]
}

type ReturnEventType {
    create: EventType
    update: Boolean
    delete: Boolean
}

#=======#
# Point #
#=======#
# point(create: InputCreatePointType, update: InputUpdatePointType, delete: [Int]): ReturnPointType

input InputCreatePointType {
    title: String
    lang: Float
    long: Float
}

input InputUpdatePointType {
    id: Int
    title: String
    lang: Float
    long: Float
}

type ReturnPointType {
    create: PointType
    update: Boolean
    delete: Boolean
}
